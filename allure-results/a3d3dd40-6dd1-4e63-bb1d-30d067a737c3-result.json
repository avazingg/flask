{"name": "test_registration_of_existing_user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=135.0.7049.85)\nStacktrace:\n\tGetHandleVerifier [0x010780E3+60707]\n\tGetHandleVerifier [0x01078124+60772]\n\t(No symbol) [0x00EA0683]\n\t(No symbol) [0x00E9DAE0]\n\t(No symbol) [0x00E91458]\n\t(No symbol) [0x00E92D40]\n\t(No symbol) [0x00E916E8]\n\t(No symbol) [0x00E91243]\n\t(No symbol) [0x00E90F51]\n\t(No symbol) [0x00E8EF30]\n\t(No symbol) [0x00E8F8CB]\n\t(No symbol) [0x00EA400E]\n\t(No symbol) [0x00F2F427]\n\t(No symbol) [0x00F0D04C]\n\t(No symbol) [0x00F2E824]\n\t(No symbol) [0x00F0CE46]\n\t(No symbol) [0x00EDC5D3]\n\t(No symbol) [0x00EDD424]\n\tGetHandleVerifier [0x012BBBC3+2435075]\n\tGetHandleVerifier [0x012B7163+2416035]\n\tGetHandleVerifier [0x012D350C+2531660]\n\tGetHandleVerifier [0x0108F1B5+155125]\n\tGetHandleVerifier [0x01095B5D+182173]\n\tGetHandleVerifier [0x0107F9B8+91640]\n\tGetHandleVerifier [0x0107FB60+92064]\n\tGetHandleVerifier [0x0106A620+4704]\n\tBaseThreadInitThunk [0x7694FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77CD82AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77CD827E+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"03f1cde7b376906794cddd73d9d26f1c\")>\n\n    @pytest.fixture\n    def register_user(driver):\n        register_page = RegisterPage(driver)\n>       register_page.open_url(f\"{url}register\")\n\ntests\\ui\\conftest.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\ui\\endpoints\\base_page.py:15: in open_url\n    self.driver.get(url)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C046B51550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CD82AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CD827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=135.0.7049.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010780E3+60707]\nE       \tGetHandleVerifier [0x01078124+60772]\nE       \t(No symbol) [0x00EA0683]\nE       \t(No symbol) [0x00E9DAE0]\nE       \t(No symbol) [0x00E91458]\nE       \t(No symbol) [0x00E92D40]\nE       \t(No symbol) [0x00E916E8]\nE       \t(No symbol) [0x00E91243]\nE       \t(No symbol) [0x00E90F51]\nE       \t(No symbol) [0x00E8EF30]\nE       \t(No symbol) [0x00E8F8CB]\nE       \t(No symbol) [0x00EA400E]\nE       \t(No symbol) [0x00F2F427]\nE       \t(No symbol) [0x00F0D04C]\nE       \t(No symbol) [0x00F2E824]\nE       \t(No symbol) [0x00F0CE46]\nE       \t(No symbol) [0x00EDC5D3]\nE       \t(No symbol) [0x00EDD424]\nE       \tGetHandleVerifier [0x012BBBC3+2435075]\nE       \tGetHandleVerifier [0x012B7163+2416035]\nE       \tGetHandleVerifier [0x012D350C+2531660]\nE       \tGetHandleVerifier [0x0108F1B5+155125]\nE       \tGetHandleVerifier [0x01095B5D+182173]\nE       \tGetHandleVerifier [0x0107F9B8+91640]\nE       \tGetHandleVerifier [0x0107FB60+92064]\nE       \tGetHandleVerifier [0x0106A620+4704]\nE       \tBaseThreadInitThunk [0x7694FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CD82AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CD827E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "start": 1744713939347, "stop": 1744713939347, "uuid": "f957e2c3-9149-4c87-9b9b-e2e394b8efca", "historyId": "5f175f7ba723fc3945de0e30a055f7cb", "testCaseId": "5f175f7ba723fc3945de0e30a055f7cb", "fullName": "tests.ui.integration.test_register_page#test_registration_of_existing_user", "labels": [{"name": "severity", "value": "blocker"}, {"name": "story", "value": "Тест регистрации уже зарегестрированного юзера"}, {"name": "feature", "value": "UI Тест"}, {"name": "parentSuite", "value": "tests.ui.integration"}, {"name": "suite", "value": "test_register_page"}, {"name": "host", "value": "LAPTOP-RCPPQPTF"}, {"name": "thread", "value": "6984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui.integration.test_register_page"}]}